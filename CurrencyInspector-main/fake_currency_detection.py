# -*- coding: utf-8 -*-
"""Fake_Currency_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sj_hso6qKHMS3SMxwrbosbMRydJp5_vG
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display

#Import supplementary visualization code visuals.py
import visuals1 as vs

# Display all visuals inline
# %matplotlib inline

# Load the Banknote Authentication dataset
# The dataset required is 'Banknote Authentication' from UCI Machine Learning Repository
# (https://archive.ics.uci.edu/ml/datasets/banknote+authentication)
data = pd.read_csv('banknote_authentication.csv')
display(data.head(n=6))

classes = data['class']
features = data.drop('class', axis=1)

# Commented out IPython magic to ensure Python compatibility.
# autoreload for automatically reloading changes made in visuals.py
# %load_ext autoreload
# %autoreload 2

display(data.describe())

vs.distribution(data)

from sklearn.preprocessing import MinMaxScaler
numerical = ['variance', 'skewness', 'kurtosis', 'entropy']
scaler = MinMaxScaler()
features[numerical] = scaler.fit_transform(features[numerical])

display(features.head(n = 6))
# Import train_test_split from the correct module
from sklearn.model_selection import train_test_split

# Assuming 'features' and 'classes' are already defined
# Split the 'features' and 'classes' data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, classes, test_size=0.4, random_state=5)

# Show the results of the split
print("Training set has {} samples.".format(X_train.shape[0]))
print("Testing set has {} samples.".format(X_test.shape[0]))

# Calculate Accuracy
n_records = len(data)
n_fake_notes = len(data[data['class'] == 0])
n_real_notes = len(data[data['class'] == 1])
accuracy = float(n_fake_notes)/n_records

# Calculate F-Score with beta = 2
precision = accuracy
recall = 1
beta = 2
fscore = (1 + beta ** 2) * precision * recall /(beta ** 2 * precision + recall)

# Print the results
print ("Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]".format(accuracy, fscore))

# Import two metrics from sklearn - fbeta_score and accuracy_score
# Portions of this project include code developed by dudeanurag
# github account : https://github.com/dudeanurag
from sklearn.metrics import fbeta_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from time import time
from sklearn.metrics import confusion_matrix

def train_predict(learner, sample_size, X_train, y_train, X_test, y_test):
    '''
    inputs:
       - learner: the learning algorithm to be trained and predicted on
       - sample_size: the size of samples (number) to be drawn from training set
       - X_train: features training set
       - y_train: income training set
       - X_test: features testing set
       - y_test: income testing set
    '''

    results = {}
    beta=2
    # Fit the learner to the training data using slicing with 'sample_size'
    start = time() # Get start time
    learner.fit(X_train[:sample_size], y_train[:sample_size])
    end = time() # Get end time

    # Calculate the training time
    results['train_time'] = end - start

    # Get the predictions on the test set,
    # then get predictions on the first 300 training samples
    start = time() # Get start time
    predictions_test = learner.predict(X_test)
    predictions_train = learner.predict(X_train[:300])
    end = time() # Get end time

    # Calculate the total prediction time
    results['pred_time'] = end - start

    # Compute accuracy on the first 300 training samples
    results['acc_train'] = accuracy_score(y_train[:300], predictions_train)

    # Compute accuracy on test set
    results['acc_test'] = accuracy_score(y_test, predictions_test)

    # Compute F-score on the the first 300 training samples
    results['f_train'] = fbeta_score(y_train[:300], predictions_train, beta)

    # Compute F-score on the test set
    results['f_test'] = fbeta_score(y_test, predictions_test, beta)

    # Compute Confusion Matrix
    results['conf_mat'] = confusion_matrix(y_test, predictions_test)

    # Success
    print ("{} trained on {} samples.".format(learner.__class__.__name__, sample_size))

    # Return the results
    return results

import numpy as np
import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split
import visuals1 as vs  # Ensure visuals1.py is in the same directory

# Assuming 'features' and 'classes' are already defined
# Split the 'features' and 'classes' data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, classes, test_size=0.4, random_state=5)

# Initialize the three models
clf_A = KNeighborsClassifier(n_neighbors=5)
clf_B = SVC(random_state=5)
clf_C = GradientBoostingClassifier(random_state=5)

# Calculate the number of samples for 5%, 20%, and 100% of the training data
samples_5 = int(X_train.shape[0] * 0.05)
samples_20 = int(X_train.shape[0] * 0.2)
samples_100 = X_train.shape[0]

# Define the train_predict function
def train_predict(clf, sample_size, X_train, y_train, X_test, y_test):
    # Train the classifier on the sample size of the data
    clf.fit(X_train[:sample_size], y_train[:sample_size])

    # Predict on the training and testing set
    y_train_pred = clf.predict(X_train[:sample_size])
    y_test_pred = clf.predict(X_test)

    # Calculate accuracy and F-score
    acc_train = accuracy_score(y_train[:sample_size], y_train_pred)
    acc_test = accuracy_score(y_test, y_test_pred)
    f_train = f1_score(y_train[:sample_size], y_train_pred, average='weighted')
    f_test = f1_score(y_test, y_test_pred, average='weighted')
    conf_mat = confusion_matrix(y_test, y_test_pred)

    # Return the results as a dictionary
    return {
        'acc_train': acc_train,
        'acc_test': acc_test,
        'f_train': f_train,
        'f_test': f_test,
        'conf_mat': conf_mat
    }

# Collect results on the learners
results = {}
for clf in [clf_A, clf_B, clf_C]:
    clf_name = clf.__class__.__name__
    results[clf_name] = {}
    for i, samples in enumerate([samples_5, samples_20, samples_100]):
        results[clf_name][i] = train_predict(clf, samples, X_train, y_train, X_test, y_test)

# Display results
print("\nTrain-Test Scores when trained on entire training set")
for key, value in results.items():
    print(f"For {key} Classifier, scores on training and test set are:")
    print(f"Accuracy on Train set: {value[2]['acc_train']}")
    print(f"Accuracy on Test set: {value[2]['acc_test']}")
    print(f"F-score on Train set: {value[2]['f_train']}")
    print(f"F-score on Test set: {value[2]['f_test']}")
    print(f"Confusion Matrix for test set:\n {value[2]['conf_mat']}")

# Run metrics visualization for the three supervised learning models chosen
# Assuming the function 'vs.evaluate' exists and takes in the required arguments
# vs.evaluate(results, accuracy, fscore)  # Uncomment and modify as needed

from sklearn.model_selection import GridSearchCV, StratifiedShuffleSplit
from sklearn.metrics import make_scorer, fbeta_score, accuracy_score
from sklearn.neighbors import KNeighborsClassifier

# Initialize the classifier
clf = KNeighborsClassifier()

# Create the parameters list you wish to tune
parameters = {
    'n_neighbors': [1, 2, 3, 4, 5, 6],
    'weights': ['uniform', 'distance'],
    'algorithm': ['ball_tree', 'kd_tree']
}

# Make an fbeta_score scoring object
scorer = make_scorer(fbeta_score, beta=2)

# Stratified shuffle split cross-validator
cv = StratifiedShuffleSplit(n_splits=10, test_size=0.4, random_state=5)

# Perform grid search on the classifier using 'scorer' as the scoring method
grid_obj = GridSearchCV(clf, parameters, scoring=scorer, cv=cv)

# Fit the grid search object to the training data and find the optimal parameters
grid_fit = grid_obj.fit(X_train, y_train)

# Get the best estimator
best_clf = grid_fit.best_estimator_

# Make predictions using the unoptimized and optimized models
predictions = clf.fit(X_train, y_train).predict(X_test)
best_predictions = best_clf.predict(X_test)

# Report the scores before and after optimization
print("Unoptimized model\n------")
print("Accuracy score on testing data: {:.4f}".format(accuracy_score(y_test, predictions)))
print("F-score on testing data: {:.4f}".format(fbeta_score(y_test, predictions, beta=2)))

print("\nOptimized Model\n------")
print("Final accuracy score on the testing data: {:.4f}".format(accuracy_score(y_test, best_predictions)))
print("Final F-score on the testing data: {:.4f}".format(fbeta_score(y_test, best_predictions, beta=2)))

print("\n------")
print("Following are the parameters for the optimized model")
print(grid_fit.best_params_)

acc_scores = []
fbeta_scores = []
k_range = range(1,16)
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train,y_train)
    y_pred = knn.predict(X_test)
    acc_scores.append(accuracy_score(y_test,y_pred))
    fbeta_scores.append(fbeta_score(y_test, y_pred, beta=2))

for i in range(len(acc_scores)):
    print ("{}: Accuracy is {}, f-score is {}".format(i+1,acc_scores[i], fbeta_scores[i]))

# Import a supervised learning model that has 'feature_importances_'
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier

# Initialize the classifiers
clf = AdaBoostClassifier(random_state=5)
clf_C = GradientBoostingClassifier(random_state=5)

# Train the supervised models on the training set
model = clf.fit(X_train, y_train)
model_C = clf_C.fit(X_train, y_train)

# Extract the feature importances
importances = model.feature_importances_
importances_C = model_C.feature_importances_

# Print the feature importances
print("Feature Importances with regard to AdaBoost Classifier:")
print(importances)

print("Feature Importances with regard to Gradient Boosting Classifier:")
print(importances_C)
